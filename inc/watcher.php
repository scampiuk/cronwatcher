<?php
/**
 * Created by PhpStorm.
 * User: chris
 * Date: 07/10/14
 * Time: 14:59
 */

require 'vendor/autoload.php';
Use Aws\DynamoDb\DynamoDbClient;

class watcher {

    var $_logHelper;

    function __construct(){
        require_once("inc/logHelper.php");
        $this->_logHelper = new logHelper();
    }

    function load($siteId, $cronId){
        return true;
    }

    /**
     * @param Integer $siteId       Site ID number
     * @param Integer $cronId       CronID number
     * @param String $identifier    Unique Identifier generated by the caller to distinquish different calls.
     * @param String $noteString    Details or other dynamic information for the cron.
     * @param String $status    "N" (for non tracking), "S" for starting or "E" for ending
     */
    function log($siteId, $cronId, $identifier, $noteString, $status){

        echo "<br /> Trying  $siteId, $cronId, $identifier, $noteString, $status";
        // Does the Site exist and does the cron exist?
        if($this->load($siteId,$cronId)){
            // Store it.
            // Include the SDK using the Composer autoloader

            $client = DynamoDbClient::factory(array('region'=>'eu-west-1', 'profile'=>'default'));

            // If the status is 'N' or 'S' , then we're creating an new record, else we're trying to update
            // and existing one.






            if(strtoupper($status)=='N' || strtoupper($status)=='S') {

                $itemArray = array(
                    "TableName" => "cronwatcher-job",
                    "Item" => $client->formatAttributes(array(
                        "SiteIdAndCronId" => $siteId . "|" . $cronId,
                        "identifier" => $identifier,
                        "created" => date("r"),
                        "status" => strtoupper($status)
                    )),
                    'ReturnConsumedCapacity' => 'TOTAL'
                );
                print_r($itemArray);

                $result = $client->putItem($itemArray);
                $this->_logHelper->info("Cron job added",$siteId, $cronId, $noteString, $status);
            } else {


                // then we're updating the existing record with the siteId|cronId and identifier
                $itemArray = array(
                    "TableName" => "cronwatcher-job",
                    "Key" => $client->formatAttributes(array(
                        "SiteIdAndCronId" => $siteId . "|" . $cronId,
                        "identifier" => $identifier
                    )),
                    "AttributeUpdates" => array(
                        "status" => array("Value"=>array("S"=>strtoupper($status)), "Action"=>"PUT"),
                        "completed" => array("Value"=>array("S"=>date("r")), "Action"=>"PUT")
                    ),
                    "Action"=>"Put"

                );

                print_r($itemArray);
                $result = $client->updateItem($itemArray);
                echo "<pre>";
                print_r($result);




            }

//            print_r($client);

        } else {


            $this->_logHelper->error("Failed to find the site/cron combo provided", $siteId, $cronId, $noteString, $status);
        }

    }



} 